import axios from 'axios';
import { API_ENDPOINTS, APP_CONFIG, AuthUtils } from '@/app/config/api';
import { Vehicle, CreateVehicleRequest } from '@/app/interfaces';

// Configurar axios con timeout extendido
axios.defaults.timeout = APP_CONFIG.API_TIMEOUTS;

/**
 * Servicio para gestionar los veh√≠culos en la API
 */
export const VehicleService = {
  /**
   * Obtiene todos los veh√≠culos registrados
   * @returns Promise con el listado de veh√≠culos
   */
  getVehicles: async (): Promise<Vehicle[]> => {
    try {
      console.log('Realizando petici√≥n GET a:', API_ENDPOINTS.VEHICLES.BASE);
      
      // Obtener headers con autenticaci√≥n
      const headers = AuthUtils.createAuthHeaders();
      console.log('Headers de autenticaci√≥n:', headers);
      
      // Intentar tres veces con diferentes configuraciones si es necesario
      let response;
      try {
        response = await axios.get(API_ENDPOINTS.VEHICLES.BASE, {
          timeout: APP_CONFIG.API_TIMEOUTS,
          headers
        });
      } catch {
        console.warn('Primer intento fallido, reintentando con timeout m√°s largo...');
        response = await axios.get(API_ENDPOINTS.VEHICLES.BASE, { 
          timeout: APP_CONFIG.API_TIMEOUTS * 2,
          headers 
        });
      }
      
      console.log('‚≠ê Status code:', response.status);
      console.log('‚≠ê Headers:', response.headers);
      console.log('‚≠ê Tipo de datos recibidos:', typeof response.data);
      
      // Si la respuesta est√° vac√≠a, devolver array vac√≠o
      if (!response.data) {
        console.log('‚úÖ Respuesta vac√≠a, devolviendo array vac√≠o');
        return [];
      }
      
      // Si la respuesta es un texto vac√≠o, devolver array vac√≠o
      if (typeof response.data === 'string' && response.data.trim() === '') {
        console.log('‚úÖ Respuesta de texto vac√≠o, devolviendo array vac√≠o');
        return [];
      }
      
      console.log('‚≠ê Datos recibidos:', response.data);
      
      // Verificar m√∫ltiples formatos posibles de respuesta
      if (Array.isArray(response.data)) {
        console.log('‚úÖ La respuesta es un array directo de veh√≠culos');
        return response.data;
      } else if (response.data && typeof response.data === 'object') {
        console.log('La respuesta es un objeto, intentando extraer veh√≠culos...');
        
        // Si la respuesta tiene el formato ApiResponse<Vehicle[]>
        if (Array.isArray(response.data.data)) {
          console.log('‚úÖ Encontrados veh√≠culos en response.data.data');
          return response.data.data;
        }
        
        // Si la respuesta tiene un formato { data: Vehicle[] }
        if (response.data.data && Array.isArray(response.data.data)) {
          console.log('‚úÖ Encontrados veh√≠culos en response.data.data (anidado)');
          return response.data.data;
        }
        
        // Formato { content: Vehicle[] } (como en Spring Data)
        if (response.data.content && Array.isArray(response.data.content)) {
          console.log('‚úÖ Encontrados veh√≠culos en response.data.content');
          return response.data.content;
        }
        
        // √öltima opci√≥n: intentar parsear la respuesta como texto JSON
        if (typeof response.data === 'string') {
          try {
            console.log('Intentando parsear respuesta como JSON...');
            const parsedData = JSON.parse(response.data);
            if (Array.isArray(parsedData)) {
              console.log('‚úÖ Datos parseados son un array');
              return parsedData;
            } else if (parsedData && typeof parsedData === 'object') {
              // Buscar en propiedades del objeto parseado
              for (const key in parsedData) {
                if (Array.isArray(parsedData[key])) {
                  console.log(`‚úÖ Encontrados veh√≠culos en parsedData.${key}`);
                  return parsedData[key];
                }
              }
            }
          } catch (parseError) {
            console.error('Error al parsear respuesta como JSON:', parseError);
          }
        }
        
        // √öltimo intento - buscar cualquier propiedad que tenga un array
        console.log('Buscando cualquier propiedad con array en la respuesta...');
        for (const key in response.data) {
          console.log(`- Revisando propiedad: ${key}, tipo:`, typeof response.data[key]);
          if (Array.isArray(response.data[key])) {
            console.log(`‚úÖ Encontrados veh√≠culos en response.data.${key}`);
            return response.data[key];
          }
        }
      }
      
      // Si no se pudo reconocer el formato, devolver array vac√≠o
      console.warn('‚ùå No se pudo extraer los veh√≠culos de la respuesta o la respuesta est√° vac√≠a.');
      
      // Crear veh√≠culos de prueba para desarrollo
      if (process.env.NODE_ENV === 'development') {
        console.log('üîß Modo desarrollo: Devolviendo veh√≠culos de prueba');
        return [
          {
            id: 1,
            model: "Cami√≥n de prueba",
            plate: "ABC-123",
            maxLoad: 5000,
            volume: 20,
            photoUrl: ""
          },
          {
            id: 2,
            model: "Furgoneta de prueba",
            plate: "XYZ-789",
            maxLoad: 1500,
            volume: 8,
            photoUrl: ""
          }
        ];
      }
      
      return [];
    } catch (error) {
      console.error('‚ùå Error al obtener veh√≠culos:', error);
      // Mostrar m√°s detalles del error si est√°n disponibles
      if (axios.isAxiosError(error)) {
        console.error('URL:', error.config?.url);
        console.error('M√©todo:', error.config?.method);
        console.error('Status:', error.response?.status);
        console.error('Mensaje de error:', error.response?.data);
      }
      
      // En modo desarrollo, devolver datos de prueba si hay error
      if (process.env.NODE_ENV === 'development') {
        console.log('üîß Modo desarrollo: Devolviendo veh√≠culos de prueba debido a error');
        return [
          {
            id: 1,
            model: "Cami√≥n de prueba (error)",
            plate: "ABC-123",
            maxLoad: 5000,
            volume: 20,
            photoUrl: ""
          },
          {
            id: 2,
            model: "Furgoneta de prueba (error)",
            plate: "XYZ-789",
            maxLoad: 1500,
            volume: 8,
            photoUrl: ""
          }
        ];
      }
      
      throw error;
    }
  },

  /**
   * Obtiene un veh√≠culo por su ID
   * @param id ID del veh√≠culo
   * @returns Promise con el veh√≠culo encontrado
   */
  getVehicleById: async (id: number): Promise<Vehicle> => {
    try {
      console.log(`Solicitando veh√≠culo con ID ${id} a:`, API_ENDPOINTS.VEHICLES.BY_ID(id));
      const headers = AuthUtils.createAuthHeaders();
      const response = await axios.get<Vehicle>(API_ENDPOINTS.VEHICLES.BY_ID(id), { headers });
      console.log(`Veh√≠culo ${id} recibido:`, response.data);
      return response.data;
    } catch (error) {
      console.error(`‚ùå Error al obtener veh√≠culo con ID ${id}:`, error);
      throw error;
    }
  },

  /**
   * Crea un nuevo veh√≠culo
   * @param vehicleData Datos del veh√≠culo a crear
   * @returns Promise con el veh√≠culo creado
   */
  createVehicle: async (vehicleData: CreateVehicleRequest): Promise<Vehicle> => {
    try {
      // Asegurarse de que photoUrl no sea undefined antes de enviar
      const dataToSend = {
        ...vehicleData,
        photoUrl: vehicleData.photoUrl || ""
      };
      
      console.log('Creando veh√≠culo con datos:', dataToSend);
      console.log('URL de creaci√≥n:', API_ENDPOINTS.VEHICLES.BASE);
      
      const headers = AuthUtils.createAuthHeaders();
      console.log('Headers de autenticaci√≥n para creaci√≥n:', headers);
      
      const response = await axios.post(API_ENDPOINTS.VEHICLES.BASE, dataToSend, { headers });
      console.log('Respuesta de creaci√≥n:', response);
      
      // Manejar el caso de respuesta vac√≠a pero status 200
      if (response.status === 200 && (!response.data || response.data === '')) {
        console.log('Veh√≠culo creado exitosamente, pero la respuesta est√° vac√≠a. Intentando obtener el veh√≠culo creado...');
        
        // Esperar un poco para dar tiempo a que el servidor procese
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        try {
          // Intentar obtener la lista actualizada de veh√≠culos
          const vehicles = await VehicleService.getVehicles();
          
          // Buscar el veh√≠culo reci√©n creado por sus propiedades
          const newVehicle = vehicles.find(v => 
            v.model === dataToSend.model && 
            v.plate === dataToSend.plate
          );
          
          if (newVehicle) {
            console.log('Veh√≠culo encontrado despu√©s de creaci√≥n:', newVehicle);
            return newVehicle;
          }
          
          // Si no lo encontramos, crear un objeto temporal con ID generado
          const tempVehicle: Vehicle = {
            ...dataToSend,
            id: Date.now() // ID temporal
          };
          console.log('Creando objeto de veh√≠culo temporal:', tempVehicle);
          return tempVehicle;
        } catch (fetchError) {
          console.error('Error al intentar obtener el veh√≠culo despu√©s de crearlo:', fetchError);
        }
      }
      
      console.log('Veh√≠culo creado:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Error al crear veh√≠culo:', error);
      if (axios.isAxiosError(error)) {
        console.error('URL:', error.config?.url);
        console.error('Datos enviados:', error.config?.data);
        console.error('Status:', error.response?.status);
        console.error('Mensaje de error:', error.response?.data);
      }
      throw error;
    }
  },

  /**
   * Actualiza un veh√≠culo existente
   * @param id ID del veh√≠culo a actualizar
   * @param vehicleData Datos actualizados del veh√≠culo
   * @returns Promise con el veh√≠culo actualizado
   */
  updateVehicle: async (id: number, vehicleData: Partial<CreateVehicleRequest>): Promise<Vehicle> => {
    try {
      // Asegurarse de que photoUrl no sea undefined antes de enviar
      const dataToSend = {
        ...vehicleData,
        photoUrl: vehicleData.photoUrl || ""
      };
      
      console.log(`Actualizando veh√≠culo ID ${id} con datos:`, dataToSend);
      console.log('URL de actualizaci√≥n:', API_ENDPOINTS.VEHICLES.BY_ID(id));
      
      const headers = AuthUtils.createAuthHeaders();
      const response = await axios.put(API_ENDPOINTS.VEHICLES.BY_ID(id), dataToSend, { headers });
      console.log('Respuesta de actualizaci√≥n:', response);
      
      // Manejar el caso de respuesta vac√≠a pero status 200
      if (response.status === 200 && (!response.data || response.data === '')) {
        console.log('Veh√≠culo actualizado exitosamente, pero la respuesta est√° vac√≠a. Intentando obtener el veh√≠culo actualizado...');
        
        try {
          const updatedVehicle = await VehicleService.getVehicleById(id);
          return updatedVehicle;
        } catch (fetchError) {
          console.error(`Error al intentar obtener el veh√≠culo ${id} despu√©s de actualizarlo:`, fetchError);
        }
        
        // Si no podemos obtener el veh√≠culo actualizado, devolver un objeto con los datos enviados
        const tempVehicle: Vehicle = {
          id,
          model: dataToSend.model || "",
          plate: dataToSend.plate || "",
          maxLoad: dataToSend.maxLoad || 0,
          volume: dataToSend.volume || 0,
          photoUrl: dataToSend.photoUrl || ""
        };
        
        console.log('Usando objeto de veh√≠culo temporal para actualizaci√≥n:', tempVehicle);
        return tempVehicle;
      }
      
      console.log('Veh√≠culo actualizado:', response.data);
      return response.data;
    } catch (error) {
      console.error(`‚ùå Error al actualizar veh√≠culo con ID ${id}:`, error);
      if (axios.isAxiosError(error)) {
        console.error('URL:', error.config?.url);
        console.error('Datos enviados:', error.config?.data);
        console.error('Status:', error.response?.status);
        console.error('Mensaje de error:', error.response?.data);
      }
      throw error;
    }
  },

  /**
   * Elimina un veh√≠culo
   * @param id ID del veh√≠culo a eliminar
   * @returns Promise vac√≠o si la eliminaci√≥n fue exitosa
   */
  deleteVehicle: async (id: number): Promise<void> => {
    try {
      console.log(`Eliminando veh√≠culo ID ${id}`);
      console.log('URL de eliminaci√≥n:', API_ENDPOINTS.VEHICLES.BY_ID(id));
      
      const headers = AuthUtils.createAuthHeaders();
      await axios.delete(API_ENDPOINTS.VEHICLES.BY_ID(id), { headers });
      console.log(`Veh√≠culo ID ${id} eliminado correctamente`);
    } catch (error) {
      console.error(`‚ùå Error al eliminar veh√≠culo con ID ${id}:`, error);
      if (axios.isAxiosError(error)) {
        console.error('URL:', error.config?.url);
        console.error('Status:', error.response?.status);
        console.error('Mensaje de error:', error.response?.data);
      }
      throw error;
    }
  }
}; 